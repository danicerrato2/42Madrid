1. Elegí Debian frente a CentOS puesto que no tengo mucha experiencia en
	administración de sistemas

2. Diferencias entre Debian y CentOS (RedHat):
	- Interfaces diferentes

	- Administrador de paquetes: 	CentOS -> YUM/DNF con formato RPM
									Debian -> dpkg/APT con formato DEB
	- Sistema de archivos:	CentOS -> XFS
							Debian -> EXT4
		Aunque ambas distribuciones soportan ambos sistemas y más.

	- Capacidad de actualizacion: 	CentOS -> admite actualizaciones de
										versiones menores, pero no o debilmente
										para las versiones principales.
									Debian -> permite actualizar de una version
										estable a otra, permitiendo mantener el
										sistema actualizado tras mucho tiempo.

	- Soporte:	CentOS -> realizado en gran parte por la comunidad, pero aceptan
					informes de errores por usuarios finales. No cuenta con soporte
					comercial, sí a través de terceros.
				Debian -> depende de la comunidad, que incluye un rastreador de
					errores, además de una lista de consultores independientes.
					Sí que cuenta con soporte comercial, Ubuntu por ejemplo.

	-Resumen: Debian es más fácil para usuarios con menos experiencia en
		administración de sistemas. CentOS es mejor para usuarios experimentados,
		así como empresas, ya que es más confiable por el apoyo de RHEL o AlmaLinux

3. Diferencias entre aptitude y apt:
	Son herramientas de administración de paquetes.
	APT (Advanced Packaging Tool) es un software gratuito y de código abierto.
		Se diseñó para paquetes .deb, pero es compatible con paquetes RPM.
		Busca el paquete a instalar en la lista de fuentes "etc/apt/sources.list"
		y la lista de dependencias de ese paquete. Hace que el usuario no tenga
		que preocuparse por instalar las dependencias.
	Aptitude es una herramienta de empaquetado avanzada que agrega una GUI,
		permitiendo al usuario instalar los paquetes de forma interactiva.
		Diseñada para Debian, pero es compatible con paquetes RPM. Permite
		operar en modo UI evitando ciertas especificaciones de bajo nivel;
		y por linea de comandos.

	Aptitude tiene más funcionalidad e integra la funcionalidad de APT.
	Aptitude puede usar UI o linea de comandos, APT solo linea de comandos.
	Aptitude tiene mejor administración de paquetes que APT.
	Aptitude elimina automaticamente los paquetes no usados al eliminar cualquier
		paquete; APT necesita la especificación explícita.
	Aptitude ofrece comandos para saber porqué se ha bloqueado cierta acción.
	Aptitude ofrece posibles medidas para evitar algunos conflictos, mientras
		que APT simplemente acaba el proceso.

4. SELinux:
	Es una arquitectura de seguridad para sistemas Linux, la cual permite a los
		administradores tener mayor control sobre las personas que pueden acceder
		a los sistemas. Es OpenSource desde el 2000 y está integrado en el kernel
		de Linux desde 2003.

	Define los controles de acceso para las aplicaciones, procesos y archivos.
		Usa politicas de seguridad que consisten en una serie de reglas.
		Cuando un proceso solicita acceso a algun objeto, SELinux consulta la cache
		de vector de acceso (AVC), donde se almacenan los permisos.
		Si no puede determinar el acceso, envia  solicitud al servidor de
		seguridad, el cual comprueba el contexto de seguridad del sujeto y del
		archivo. Aquí se deniega o permite el acceso. En caso de negarse,
		aparece el mensaje "avc: denied" en "/var/log.messsages"

5. APPArmor:
	Es un sistema de seguridad de control de acceso tipo MAC (Mandatory Access
		Control). El núcleo pregunta a AppArmor antes de cada llamada del sistema
		para saber si un proceso está autorizado para realizar cierta acción.

	Aplica un conjunto de reglas a cada programa en base a su ruta de instalación.
		Las reglas no dependen del usuario, se les aplican las mismas reglas.

	Los perfiles se guardan en "/etc/apparmor.d/" y contienen una serie de reglas
		de control de acceso sobre los recursos que puede usar cada programa.

	- Instalar AppArmor:
		sudo apt install apparmor apparmor-profiles apparmor-utils

	- Comprobar estdo de AppArmor:
		aa-status

6. Creación de la maquina virtual:
	1. Creamos nueva máquina de Linux (Debian) con 1024 MB de memoria y 8 GB de
		almacenamiento.
	2. Seleccionamos la imagen de disco (.iso) de Debian descargada (ult. version)
	3. Iniciamos la máquina y elegimos los idiomas que queremos
	4. Nombre de la maquina: dcerrato42
	5. Dominio para la red: (Dejar en blanco)
	6. Nombre de usuario: Daniel Cerrato
	7. Nombre de usuario para la cuenta: dcerrato
	8. Metodo de particionado: Manual
	9. Creamos nueva tabla de particionado VBOX Harddisk creado anteriormente (8GB)
	10. Seleccionamos la particion nueva:
		10.1. Le damos 500 MB de memoria primaria y al inicio de la particion.
		10.2. La colgamos del "boot" y terminamos
	11. Seleccionamos la particion nueva:
		11.1. Le damos el tamaño máximo restante de memoria lógica.
		11.2. El punto de montaje lo dejamos vacío para después
	12. Accedemos a la configuración de los volúmenes cifrados:
		12.1. Los creamos en la segunda partición.
		12.2. Terminamos de definir la partición y acabamos.
	13. Introducimos frase para la encriptacion: 42islife
	14. Accedemos a la configuracion de la LVM (Logical Volum Manager):
		14.1. Creamos un nuevo grupo: LVMGroup
		14.2. Seleccionamos sda5_crypt como localidad del nuevo grupo.
		14.3. Creamos los volumenes logicos: root (2GB), swap (1024MB),
			home (1GB), var (1GB), srv (1GB), tmp (1GB), var-log (resto)
		14.4. Terminamos y empezamos a configurar las sub-particiones:
			14.4.1. home -> EXT4 colgada de /home
			14.4.2. root -> EXT4 colgada de /
			14.4.3. srv -> EXT4 colgada de /srv
			14.4.4. swap -> swap area
			14.4.5. tmp -> EXT4 colgada de /tmp
			14.4.6. var -> EXT4 colgada de /var
			14.4.7. var-log -> EXT4 colgada de /var/log (creada manualmente)
		14.5. Terminamos y guardamos los cambios
	15. No escaneamos ningun CD o DVD más.
	16. Seleccionamos el archivo deb.debian.org
	17. Dejamos en blanco el HTTP
	18. Decimos que no queremos participar en la encuesta.
	19. Deseleccionamos SSH server y las herramientas standar del sistema
	20. Instalamos GRUB en la memoria VBOX Hardisk

7. VM:
	Arrancamos la máquina virtual, desbloqueamos el script con la frase "42islife",
		iniciamos sesion (dcerrato y su contraseña).
	Entramos en modo root -> "su"
	Actualizamos apt -> "apt update; apt upgrade"
	Instalamos sudo -> "apt install sudo"
	Crear un usuario -> "sudo adduser [username]"
	Cambiar contraseña -> "sudo passwd [username]"
	Comprobar usuarios -> "getent passwd | cut -d: -f1"
	Eliminar usuarios -> "sudo userdel -r [username]"
	Añadimos un usuario a un grupo -> "sudo usermod -aG [group] [username]"
		-a : append
		-G : group
	Comprobar un grupo -> "getent group [grupo]"
	Eliminar usuario de un grupo -> "sudo gpasswd -d [username] [group]"
	Salir del modo root -> "exit"
	Crear grupos -> "sudo groupadd [groupname]"
	Ver todos los grupos -> "groups"
	Reiniciar VM -> "sudo reboot"
	Comprobar hostname -> "sudo hostnamectl"
	Cambiar hostname -> "sudo hostnamectl set-hostname [newhostname]"
	Comprobar particiones -> "lsblk"
	Comprobar acciones con sudo -> "sudo vi /var/log/auth.log"

8. SSH:
	Instalar SSH -> "sudo apt install openssh-server"
	Comprobar ssh corriendo -> "sudo systemctl status ssh"
	Comprobar ip -> "ip a"
	Añadir un puerto ->
		"cd /etc/ssh; sudo vim sshd_config (cambiar '#Port 22' por 'Port [port]')"
	Incluir puerto en la lista de la VM:
		VirtualBox -> Elegir VM -> Settings -> "Red/Network" -> "Adaptador1" ->
			"Advance" -> "Port Forwarding" -> Añadir regla -> Host/Guest port igual
	Acceder en remoto a VM -> "ssh -p [port] [username]@[ip]"
		ip para ordenador 42 -> 127.0.0.1
		ip para ordenador personal -> 10.0.2.15

9. UFW:
	Instalar UFW -> "sudo apt install ufw"
	Activar UFW -> "sudo ufw enable"
	Comprobar ufw activo -> "sudo ufw status"
	Permitir puertos -> "sudo ufw allow [port]"
	Comprobar reglas -> "sudo ufw status"
	Eliminar reglas -> "sudo ufw delete [ruleposition]"

10. Politica de contraseñas:
	Instalar herramienta seguridad -> "sudo apt install libpam-pwquality"
	Abrir archivo de control -> "sudo vi /etc/login.defs"
		PASS_MAX_DAYS 30 (dias en los que expira la contraseña)
		PASS_MIN_DAYS 2  (dias minimos para cambiar de contraseña)
		PASS_WARN_AGE 7  (dias de antelacion para aviso de cambio de contraseña)
	Abrir archivo requisitos -> "sudo vi /etc/pam.d/common-password"
		retry = 3		(numero maximo de intentos)
		minlen = 10		(longitud minima)
		ucredit = -1	(numero minimo de mayusculas)
		dcredit = -1	(numero minimo de digitos)
		maxrepeat = 3	(numero maximo de repeticiones seguidas)
		usercheck = 0	(permiso de introducir el nombre de usuario)
		difok = 7 		(numero de caracteres distintos de la contraseña antigua)
		enforce_for_root (permiso especial para el root)

11. Politca de sudo:
	Abrir archivo para sudo -> "sudo visudo"
	Añadir "Defaults":
		passwd_tries = 3					(maximo intentos contraseña)
		badpass_message = [message]			(mensaje en caso de fallo contraseña)
		logfile = "/var/log/sudo/sudo.log"	(archivo log para uso de sudo)
		requiretty							(modo TTY activado)
	Añadidos otros "Defaults" interesantes:
		timestamp_timeout = 1				(mins para preguntar contraseña)
		log_input, log_output				(guarda inicios y cierres de sesion)

12. monitoring.sh:
	Escribir en todos los monitores -> "wall [OPTIONS] [MESSAGE]"
		-n : Quita el banner de informacion
	*** Lo que hace cada comando se explica con el nombre ***
	Crear/editar crontab (en modo su) -> crontab -e
	Crear/editar crontab (sin modo su) -> sudo crontab -u [username] -e
	Comprobar crontab -> sudo contrab -l
	Automatizando:
		m 	-> minuto (0-59)
		h 	-> hora (0-23)
		dom -> dia del mes (1-31)
		mon -> mes del año (1-12)
		dow -> dia de la semana (0:domingo-6:sabado)
		command -> ruta al script (ha de colgar de la raiz)

		*/[num] -> cada [num] (minutos, horas...)


*** Comandos para monitoring.sh

	a.1. Arquitectura y kernel usados ->
		"uname -a"
	b.1. Numero de CPUs físicas ->
		"lscpu | grep "CPU(s):" | awk '{print $2}'"
	c.1. Numero de CPUs virtuales ->
		"grep -c "^processor" /proc/cpuinfo"
	d.1. Fraccion y porcentaje de memoria usada ->
		"free -m | grep "Mem:" | \
			awk '{printf "%d/%dMB (%.2f%%)", $3, $2, $3/$2*100}'"
	e.1. Fraccion de almacenamiento disponible y porcentaje de uso ->
		"df -Bm | grep "^/dev/" | grep -v "/boot$" | \
			awk '{t+=$2; f+=$4} END \
				{printf "%d/%dMb (%.2f%%)", f, t, 1-f/t}'"
	f.1. Porcentaje de uso de CPU ->
		"top -bn1 | grep "^%Cpu(s):" | awk '{printf "%.1f%%", $2}'"
	g.1. Comprobar fecha y hora del ultimo boot ->
		"who -b | awk '{print $(NF-1) " " $NF}'" 
	h.1. Comprobar si se esta usando LVM ->
		"lsblk | grep -c "lvm" | \
			awk '{if ($1 != 0) {print "yes"} else {print "no"}}'"
	i.1. Numero de conexiones tcp abiertas ->
		"ss -tunlp | grep -c "tcp" | awk '{print ($1)-1}'"
	j.1. Numero de usuarios en el servidor ->
		"who | wc -l"
	k.1. Direccion IPv4 ->
		"hostname -I"
	k.2. Direccion MAC ->
		"ip link | grep "inet" | awk '{print $2}'"
	l.1. Numero de comandos ejecutados con sudo ->
		"journalctl _COMM=sudo | grep -c COMMAND"
